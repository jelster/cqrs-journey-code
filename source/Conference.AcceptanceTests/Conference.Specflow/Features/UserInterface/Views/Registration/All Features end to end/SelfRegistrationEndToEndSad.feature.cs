// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Conference.Specflow.Features.UserInterface.Views.Registration.AllFeaturesEndToEnd
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SelfRegistrantEndToEndScenarioForMakingARegistrationForAConferenceSadPathFeature : Xunit.IUseFixture<SelfRegistrantEndToEndScenarioForMakingARegistrationForAConferenceSadPathFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SelfRegistrationEndToEndSad.feature"
#line hidden
        
        public SelfRegistrantEndToEndScenarioForMakingARegistrationForAConferenceSadPathFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Self Registrant end to end scenario for making a Registration for a Conference (s" +
                    "ad path)", "In order to register for a conference\r\nAs an Attendee\r\nI want to be able to regis" +
                    "ter for the conference, pay for the Registration Order and associate myself with" +
                    " the paid Order automatically", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 19
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "rate",
                        "quota"});
            table1.AddRow(new string[] {
                        "General admission",
                        "$199",
                        "10"});
            table1.AddRow(new string[] {
                        "CQRS Workshop",
                        "$500",
                        "10"});
            table1.AddRow(new string[] {
                        "Additional cocktail party",
                        "$50",
                        "10"});
#line 20
 testRunner.Given("the list of the available Order Items for the CQRS summit 2012 conference", ((string)(null)), table1);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table2.AddRow(new string[] {
                        "General admission",
                        "1"});
            table2.AddRow(new string[] {
                        "CQRS Workshop",
                        "1"});
            table2.AddRow(new string[] {
                        "Additional cocktail party",
                        "1"});
#line 25
 testRunner.And("the selected Order Items", ((string)(null)), table2);
#line hidden
        }
        
        public virtual void SetFixture(SelfRegistrantEndToEndScenarioForMakingARegistrationForAConferenceSadPathFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Self Registrant end to end scenario for making a Registration for a Conference (s" +
            "ad path)")]
        [Xunit.TraitAttribute("Description", "No selected Seat Type")]
        public virtual void NoSelectedSeatType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No selected Seat Type", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line 19
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table3.AddRow(new string[] {
                        "General admission",
                        "0"});
            table3.AddRow(new string[] {
                        "CQRS Workshop",
                        "0"});
            table3.AddRow(new string[] {
                        "Additional cocktail party",
                        "0"});
#line 36
 testRunner.Given("the selected Order Items", ((string)(null)), table3);
#line 41
 testRunner.When("the Registrant proceed to make the Reservation with no selected seats");
#line 42
 testRunner.Then("the message \'One or more items are required\' will show up");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Self Registrant end to end scenario for making a Registration for a Conference (s" +
            "ad path)")]
        [Xunit.TraitAttribute("Description", "All Seat Types are available, one get reserved and two get waitlisted")]
        public virtual void AllSeatTypesAreAvailableOneGetReservedAndTwoGetWaitlisted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All Seat Types are available, one get reserved and two get waitlisted", ((string[])(null)));
#line 47
this.ScenarioSetup(scenarioInfo);
#line 19
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type"});
            table4.AddRow(new string[] {
                        "CQRS Workshop"});
            table4.AddRow(new string[] {
                        "Additional cocktail party"});
#line 48
 testRunner.Given("these Seat Types becomes unavailable before the Registrant make the reservation", ((string)(null)), table4);
#line 52
 testRunner.When("the Registrant proceed to make the Reservation with seats already reserved");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "selected",
                        "message"});
            table5.AddRow(new string[] {
                        "CQRS Workshop",
                        "0",
                        "Could not reserve all the requested seats."});
            table5.AddRow(new string[] {
                        "Additional cocktail party",
                        "0",
                        "Could not reserve all the requested seats."});
#line 53
 testRunner.Then("the Registrant is offered to select any of these available seats", ((string)(null)), table5);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table6.AddRow(new string[] {
                        "General admission",
                        "1"});
#line 57
 testRunner.And("these Order Items should be reserved", ((string)(null)), table6);
#line 60
 testRunner.And("the total should read $199");
#line 61
 testRunner.And("the countdown started");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Self Registrant end to end scenario for making a Registration for a Conference (s" +
            "ad path)")]
        [Xunit.TraitAttribute("Description", "Checkout:Registrant Invalid Details")]
        public virtual void CheckoutRegistrantInvalidDetails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Checkout:Registrant Invalid Details", ((string[])(null)));
#line 64
this.ScenarioSetup(scenarioInfo);
#line 19
this.FeatureBackground();
#line 65
 testRunner.Given("the Registrant proceed to make the Reservation");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "first name",
                        "last name",
                        "email address"});
            table7.AddRow(new string[] {
                        "Gregory",
                        "",
                        "gregoryweber@invalid"});
#line 66
 testRunner.And("the Registrant enter these details", ((string)(null)), table7);
#line 69
 testRunner.When("the Registrant proceed to Checkout:Payment");
#line 70
 testRunner.Then("the message \'The LastName field is required.\' will show up");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Self Registrant end to end scenario for making a Registration for a Conference (s" +
            "ad path)")]
        [Xunit.TraitAttribute("Description", "Checkout:Payment with cancellation")]
        public virtual void CheckoutPaymentWithCancellation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Checkout:Payment with cancellation", ((string[])(null)));
#line 73
this.ScenarioSetup(scenarioInfo);
#line 19
this.FeatureBackground();
#line 74
 testRunner.Given("the Registrant proceed to make the Reservation");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "first name",
                        "last name",
                        "email address"});
            table8.AddRow(new string[] {
                        "Gregory",
                        "Weber",
                        "gregoryweber@contoso.com"});
#line 75
 testRunner.And("the Registrant enter these details", ((string)(null)), table8);
#line 78
 testRunner.And("the Registrant proceed to Checkout:Payment");
#line 79
 testRunner.When("the Registrant proceed to cancel the payment");
#line 80
    testRunner.Then("the payment selection page will show up");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Self Registrant end to end scenario for making a Registration for a Conference (s" +
            "ad path)")]
        [Xunit.TraitAttribute("Description", "Partiall Seats allocation")]
        public virtual void PartiallSeatsAllocation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Partiall Seats allocation", ((string[])(null)));
#line 83
this.ScenarioSetup(scenarioInfo);
#line 19
this.FeatureBackground();
#line 84
 testRunner.Given("the Registrant proceed to make the Reservation");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "first name",
                        "last name",
                        "email address"});
            table9.AddRow(new string[] {
                        "Gregory",
                        "Weber",
                        "gregoryweber@contoso.com"});
#line 85
 testRunner.And("the Registrant enter these details", ((string)(null)), table9);
#line 88
 testRunner.And("the Registrant proceed to Checkout:Payment");
#line 89
 testRunner.And("the Registrant proceed to confirm the payment");
#line 90
    testRunner.And("the Registration process was successful");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table10.AddRow(new string[] {
                        "General admission",
                        "1"});
            table10.AddRow(new string[] {
                        "CQRS Workshop",
                        "1"});
            table10.AddRow(new string[] {
                        "Additional cocktail party",
                        "1"});
#line 91
 testRunner.And("the Order should be created with the following Order Items", ((string)(null)), table10);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "first name",
                        "last name",
                        "email address"});
            table11.AddRow(new string[] {
                        "General admission",
                        "Gregory",
                        "Weber",
                        "gregoryweber@contoso.com"});
            table11.AddRow(new string[] {
                        "Additional cocktail party",
                        "Gregory",
                        "Weber",
                        "gregoryweber@contoso.com"});
#line 96
 testRunner.When("the Registrant assign these seats", ((string)(null)), table11);
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table12.AddRow(new string[] {
                        "General admission",
                        "1"});
            table12.AddRow(new string[] {
                        "Additional cocktail party",
                        "1"});
#line 100
 testRunner.Then("these seats are assigned", ((string)(null)), table12);
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Self Registrant end to end scenario for making a Registration for a Conference (s" +
            "ad path)")]
        [Xunit.TraitAttribute("Description", "Partial Promotional Code for none of the selected items")]
        public virtual void PartialPromotionalCodeForNoneOfTheSelectedItems()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Partial Promotional Code for none of the selected items", new string[] {
                        "Ignore"});
#line 108
this.ScenarioSetup(scenarioInfo);
#line 19
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table13.AddRow(new string[] {
                        "CQRS Workshop",
                        "1"});
#line 109
 testRunner.Given("the selected Order Items", ((string)(null)), table13);
#line 112
 testRunner.And("the total amount should be of $500");
#line 113
 testRunner.When("the Registrant apply the \'VOLUNTEER\' Promotional Code");
#line 114
 testRunner.Then("the \'VOLUNTEER\' Promo code will not be applied and an error message will inform a" +
                    "bout the problem");
#line 115
 testRunner.And("the total amount should be of $500");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SelfRegistrantEndToEndScenarioForMakingARegistrationForAConferenceSadPathFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SelfRegistrantEndToEndScenarioForMakingARegistrationForAConferenceSadPathFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
