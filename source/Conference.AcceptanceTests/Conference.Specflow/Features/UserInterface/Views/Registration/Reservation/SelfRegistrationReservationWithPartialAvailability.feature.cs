// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Conference.Specflow.Features.UserInterface.Views.Registration.Reservation
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SelfRegistrantScenariosForMakingAReservationForAConferenceSiteWithOrderItemsPartiallyAvailableFeature : Xunit.IUseFixture<SelfRegistrantScenariosForMakingAReservationForAConferenceSiteWithOrderItemsPartiallyAvailableFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SelfRegistrationReservationWithPartialAvailability.feature"
#line hidden
        
        public SelfRegistrantScenariosForMakingAReservationForAConferenceSiteWithOrderItemsPartiallyAvailableFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Self Registrant scenarios for making a Reservation for a Conference site with Ord" +
                    "er Items partially available", "In order to reserve Seats for a Conference\r\nAs an Attendee\r\nI want to be able to " +
                    "select an Order Item from one or many of the available and or waitlisted Order I" +
                    "tems and make a Reservation", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 20
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "rate",
                        "quota"});
            table1.AddRow(new string[] {
                        "General admission",
                        "$199",
                        "100"});
            table1.AddRow(new string[] {
                        "CQRS Workshop",
                        "$500",
                        "100"});
            table1.AddRow(new string[] {
                        "Additional cocktail party",
                        "$50",
                        "100"});
#line 21
 testRunner.Given("the list of the available Order Items for the CQRS summit 2012 conference", ((string)(null)), table1);
#line hidden
        }
        
        public virtual void SetFixture(SelfRegistrantScenariosForMakingAReservationForAConferenceSiteWithOrderItemsPartiallyAvailableFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Self Registrant scenarios for making a Reservation for a Conference site with Ord" +
            "er Items partially available")]
        [Xunit.TraitAttribute("Description", "All the Order Items are selected and none are available, then none get reserved")]
        public virtual void AllTheOrderItemsAreSelectedAndNoneAreAvailableThenNoneGetReserved()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All the Order Items are selected and none are available, then none get reserved", ((string[])(null)));
#line 30
 this.ScenarioSetup(scenarioInfo);
#line 20
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table2.AddRow(new string[] {
                        "General admission",
                        "1"});
            table2.AddRow(new string[] {
                        "CQRS Workshop",
                        "1"});
            table2.AddRow(new string[] {
                        "Additional cocktail party",
                        "1"});
#line 31
  testRunner.Given("the selected Order Items", ((string)(null)), table2);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type"});
            table3.AddRow(new string[] {
                        "General admission"});
            table3.AddRow(new string[] {
                        "CQRS Workshop"});
            table3.AddRow(new string[] {
                        "Additional cocktail party"});
#line 36
 testRunner.And("these Seat Types becomes unavailable before the Registrant make the reservation", ((string)(null)), table3);
#line 41
 testRunner.When("the Registrant proceed to make the Reservation with seats already reserved");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "selected",
                        "message"});
            table4.AddRow(new string[] {
                        "General admission",
                        "0",
                        "Could not reserve all the requested seats."});
            table4.AddRow(new string[] {
                        "CQRS Workshop",
                        "0",
                        "Could not reserve all the requested seats."});
            table4.AddRow(new string[] {
                        "Additional cocktail party",
                        "0",
                        "Could not reserve all the requested seats."});
#line 42
 testRunner.Then("the Registrant is offered to select any of these available seats", ((string)(null)), table4);
#line 47
 testRunner.And("the countdown started");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Self Registrant scenarios for making a Reservation for a Conference site with Ord" +
            "er Items partially available")]
        [Xunit.TraitAttribute("Description", "All the Order Items are selected and two not available, then one get reserved and" +
            " two not")]
        public virtual void AllTheOrderItemsAreSelectedAndTwoNotAvailableThenOneGetReservedAndTwoNot()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All the Order Items are selected and two not available, then one get reserved and" +
                    " two not", ((string[])(null)));
#line 52
 this.ScenarioSetup(scenarioInfo);
#line 20
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table5.AddRow(new string[] {
                        "General admission",
                        "1"});
            table5.AddRow(new string[] {
                        "CQRS Workshop",
                        "1"});
            table5.AddRow(new string[] {
                        "Additional cocktail party",
                        "1"});
#line 53
  testRunner.Given("the selected Order Items", ((string)(null)), table5);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type"});
            table6.AddRow(new string[] {
                        "CQRS Workshop"});
            table6.AddRow(new string[] {
                        "Additional cocktail party"});
#line 58
 testRunner.And("these Seat Types becomes unavailable before the Registrant make the reservation", ((string)(null)), table6);
#line 62
 testRunner.When("the Registrant proceed to make the Reservation with seats already reserved");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "selected",
                        "message"});
            table7.AddRow(new string[] {
                        "General admission",
                        "1",
                        ""});
            table7.AddRow(new string[] {
                        "CQRS Workshop",
                        "0",
                        "Could not reserve all the requested seats."});
            table7.AddRow(new string[] {
                        "Additional cocktail party",
                        "0",
                        "Could not reserve all the requested seats."});
#line 63
 testRunner.Then("the Registrant is offered to select any of these available seats", ((string)(null)), table7);
#line 68
 testRunner.And("the countdown started");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Self Registrant scenarios for making a Reservation for a Conference site with Ord" +
            "er Items partially available")]
        [Xunit.TraitAttribute("Description", "All the Order Items are selected, one is partially available and one none availab" +
            "le, then two get reserved and one not")]
        public virtual void AllTheOrderItemsAreSelectedOneIsPartiallyAvailableAndOneNoneAvailableThenTwoGetReservedAndOneNot()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All the Order Items are selected, one is partially available and one none availab" +
                    "le, then two get reserved and one not", ((string[])(null)));
#line 73
 this.ScenarioSetup(scenarioInfo);
#line 20
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table8.AddRow(new string[] {
                        "General admission",
                        "1"});
            table8.AddRow(new string[] {
                        "CQRS Workshop",
                        "1"});
            table8.AddRow(new string[] {
                        "Additional cocktail party",
                        "1"});
#line 74
  testRunner.Given("the selected Order Items", ((string)(null)), table8);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table9.AddRow(new string[] {
                        "CQRS Workshop",
                        "10"});
            table9.AddRow(new string[] {
                        "Additional cocktail party",
                        ""});
#line 79
 testRunner.And("these Seat Types becomes unavailable before the Registrant make the reservation", ((string)(null)), table9);
#line 83
 testRunner.And("the Registrant proceed to make the Reservation with seats already reserved");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "selected",
                        "message"});
            table10.AddRow(new string[] {
                        "General admission",
                        "1",
                        ""});
            table10.AddRow(new string[] {
                        "CQRS Workshop",
                        "1",
                        ""});
            table10.AddRow(new string[] {
                        "Additional cocktail party",
                        "0",
                        "Could not reserve all the requested seats."});
#line 84
 testRunner.And("the Registrant is offered to select any of these available seats", ((string)(null)), table10);
#line 89
 testRunner.And("the total should read $699");
#line 90
 testRunner.When("the Registrant proceed to make the Reservation");
#line 91
 testRunner.Then("the Reservation is confirmed for all the selected Order Items");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table11.AddRow(new string[] {
                        "General admission",
                        "1"});
            table11.AddRow(new string[] {
                        "CQRS Workshop",
                        "1"});
#line 92
 testRunner.And("these Order Items should be reserved", ((string)(null)), table11);
#line 96
 testRunner.And("the total should read $699");
#line 97
 testRunner.And("the countdown started");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Self Registrant scenarios for making a Reservation for a Conference site with Ord" +
            "er Items partially available")]
        [Xunit.TraitAttribute("Description", "1 order item is available, 2 are waitlisted and 2 are selected, then 2 get confir" +
            "med")]
        public virtual void _1OrderItemIsAvailable2AreWaitlistedAnd2AreSelectedThen2GetConfirmed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1 order item is available, 2 are waitlisted and 2 are selected, then 2 get confir" +
                    "med", new string[] {
                        "Ignore"});
#line 104
this.ScenarioSetup(scenarioInfo);
#line 20
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table12.AddRow(new string[] {
                        "General admission",
                        "0"});
#line 105
 testRunner.Given("the list of available Order Items selected by the Registrant", ((string)(null)), table12);
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table13.AddRow(new string[] {
                        "CQRS Workshop",
                        "1"});
            table13.AddRow(new string[] {
                        "Additional cocktail party",
                        "1"});
#line 108
 testRunner.And("the list of these Order Items offered to be waitlisted and selected by the Regist" +
                    "rant", ((string)(null)), table13);
#line 112
 testRunner.When("the Registrant proceed to make the Reservation");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table14.AddRow(new string[] {
                        "CQRS Workshop",
                        "1"});
            table14.AddRow(new string[] {
                        "Additional cocktail party",
                        "1"});
#line 113
 testRunner.Then("these order itmes get confirmed being waitlisted", ((string)(null)), table14);
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Self Registrant scenarios for making a Reservation for a Conference site with Ord" +
            "er Items partially available")]
        [Xunit.TraitAttribute("Description", "1 order item is available,  2 are waitlisted and 1 available is selected, then on" +
            "ly 1 get reserved")]
        public virtual void _1OrderItemIsAvailable2AreWaitlistedAnd1AvailableIsSelectedThenOnly1GetReserved()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1 order item is available,  2 are waitlisted and 1 available is selected, then on" +
                    "ly 1 get reserved", new string[] {
                        "Ignore"});
#line 123
this.ScenarioSetup(scenarioInfo);
#line 20
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table15.AddRow(new string[] {
                        "General admission",
                        "1"});
#line 124
 testRunner.Given("the list of available Order Items selected by the Registrant", ((string)(null)), table15);
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table16.AddRow(new string[] {
                        "CQRS Workshop",
                        "0"});
            table16.AddRow(new string[] {
                        "Additional cocktail party",
                        "0"});
#line 127
 testRunner.And("the list of these Order Items offered to be waitlisted and selected by the Regist" +
                    "rant", ((string)(null)), table16);
#line 131
 testRunner.When("the Registrant proceed to make the Reservation");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table17.AddRow(new string[] {
                        "General admission",
                        "1"});
#line 132
 testRunner.Then("these order items get reserved", ((string)(null)), table17);
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Self Registrant scenarios for making a Reservation for a Conference site with Ord" +
            "er Items partially available")]
        [Xunit.TraitAttribute("Description", "1 order item is available, 2 are waitlisted, 1 available and 1 waitlisted are sel" +
            "ected, then 1 get reserved and 1 get waitlisted")]
        public virtual void _1OrderItemIsAvailable2AreWaitlisted1AvailableAnd1WaitlistedAreSelectedThen1GetReservedAnd1GetWaitlisted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1 order item is available, 2 are waitlisted, 1 available and 1 waitlisted are sel" +
                    "ected, then 1 get reserved and 1 get waitlisted", new string[] {
                        "Ignore"});
#line 141
this.ScenarioSetup(scenarioInfo);
#line 20
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table18.AddRow(new string[] {
                        "General admission",
                        "1"});
#line 142
 testRunner.Given("the list of available Order Items selected by the Registrant", ((string)(null)), table18);
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table19.AddRow(new string[] {
                        "CQRS Workshop",
                        "1"});
            table19.AddRow(new string[] {
                        "Additional cocktail party",
                        "0"});
#line 145
 testRunner.And("the list of these Order Items offered to be waitlisted and selected by the Regist" +
                    "rant", ((string)(null)), table19);
#line 149
 testRunner.When("the Registrant proceed to make the Reservation");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table20.AddRow(new string[] {
                        "CQRS Workshop",
                        "1"});
#line 150
 testRunner.Then("these order itmes get confirmed being waitlisted", ((string)(null)), table20);
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table21.AddRow(new string[] {
                        "General admission",
                        "1"});
#line 153
 testRunner.And("these other order items get reserved", ((string)(null)), table21);
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SelfRegistrantScenariosForMakingAReservationForAConferenceSiteWithOrderItemsPartiallyAvailableFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SelfRegistrantScenariosForMakingAReservationForAConferenceSiteWithOrderItemsPartiallyAvailableFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
